.Logger: ClassType

.Handler: ClassType

.Formatter: ClassType

.Filter: ClassType

.LogRecord: ClassType
.LogRecord.name: Str
.LogRecord.level: Nat
.LogRecord.pathname: Str
.LogRecord.lineno: Nat
.LogRecord.msg: Str
.LogRecord.args: GenericTuple
.LogRecord.exc_info: GenericTuple
.LogRecord.func: Str or NoneType
.LogRecord.sinfo: Str or NoneType
.LogRecord.getMessage: (self: .LogRecord) -> Str

.LoggerAdaptor: ClassType

.getLogger: (name: Str or NoneType := NoneType) -> .Logger
.getLoggerClass: () -> ClassType
.getLogRecordFactory: () -> ClassType
.debug!: (msg: Str, args := GenericTuple, kwargs := GenericDict) => NoneType
.info!: (msg: Str, args := GenericTuple, kwargs := GenericDict) => NoneType
.warning!: (msg: Str, args := GenericTuple, kwargs := GenericDict) => NoneType
.error!: (msg: Str, args := GenericTuple, kwargs := GenericDict) => NoneType
.critical!: (msg: Str, args := GenericTuple, kwargs := GenericDict) => NoneType
.exception!: (msg: Str, args := GenericTuple, kwargs := GenericDict) => NoneType
.log!: (level: Nat, msg: Str, args := GenericTuple, kwargs := GenericDict) => NoneType
.disable!: (level := Nat) => NoneType
.addLevelName!: (level: Nat, levelName: Str) => NoneType
.getLevelNamesMapping!: () => GenericDict
.getLevelName!: (level: Nat) -> Str
.makeLogRecord!: (args: GenericTuple) -> .LogRecord
# TODO: stream
.basicConfig!: (level := Nat, format := Str, datefmt := Str, filename := Str, filemode := Str, stream := Obj) => NoneType
.shutdown!: () => NoneType
