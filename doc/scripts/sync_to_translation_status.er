# TODO: support Windows
os = pyimport "os"
re = pyimport "re"
mylib = pyimport "mylib" # TODO: Make it work without this
# tqdm = pyimport "tqdm"

LANGUAGES_KEBAB_CASE = ["JA", "zh-TW", "zh-CN"]
EN = "EN"


path_to_posix path: Str =
    if mylib.path_sep == "/":
        do path
        do path.replace(mylib.path_sep, "/")


main!() =
    '''
    path_to_erg/erg/doc
    '''
    cwd = os.path.dirname! mylib.get_file_dirname!()
    os.chdir! cwd

    badge_pattern = re.compile("\\[!\\[badge\\]\\(([\\w.,@?^=%&:\\/~+#-]+)\\)\\]\\(([\\w.,@?^=%&:\\/~+#-]+)\\)")

    get_badge! absolute_file_path =
        if! os.path.exists!(absolute_file_path) and os.path.isfile!(absolute_file_path):
            do!:
                with! open!(absolute_file_path, encoding := "utf-8"), f =>
                    badge_match = badge_pattern.search(f.read!())
                    match badge_match:
                        (matched: re.Match) -> matched.group(0)
                        _ -> "Badge not found"
            do!:
                "File not found"

    doc_en_relative_file_paths =
        result = ![]
        absolute_dir_stack = ![mylib.path_join(cwd, EN)]
        while! do! len(absolute_dir_stack) > 0, do!:
            top_absolute_dir = absolute_dir_stack.pop!()
            basenames = sorted os.listdir! top_absolute_dir # TODO: use `os.scandir!`
            absolute_dirs = ![]
            for! basenames, basename =>
                absolute_path = mylib.path_join(top_absolute_dir, basename)
                if! os.path.isfile!(absolute_path):
                    do! result.push! mylib.path_relpath(absolute_path, cwd)
                    # do! os.path.isdir!(absolute_path)
                    do! absolute_dirs.push! absolute_path
            absolute_dir_stack.extend! reversed absolute_dirs
        result

    for! LANGUAGES_KEBAB_CASE, lang =>
        result_text = !"# \{lang} translation status\n\n"
        result_text.push! "This file is generated automatically. If you want to edit this, edit [`doc/scripts/sync_to_translation_status.er`](../scripts/sync_to_translation_status.er)\n\n"
        add_table_row_text! left: Str, right: Str =
            result_text.push! "| \{left} | \{right} |\n"

        add_table_row_text! "EN file name", "edit icon and badge"
        add_table_row_text! "---", "---"
        add_table_row_text! "[README.md](../../README.md)", "[📝 Edit](../../README_\{lang}.md) \{get_badge!(mylib.path_join(cwd, "../README_\{lang}.md"))}"
        add_table_row_text! "[CODE_OF_CONDUCT.md](../../CODE_OF_CONDUCT.md)", "[📝 Edit](../CODE_OF_CONDUCT/CODE_OF_CONDUCT_\{lang}.md) \{get_badge!(mylib.path_join(cwd, "./CODE_OF_CONDUCT/CODE_OF_CONDUCT_\{lang}.md"))}"
        add_table_row_text! "[CONTRIBUTING.md](../../CONTRIBUTING.md)", "[📝 Edit](../CONTRIBUTING/CONTRIBUTING_\{lang}.md) \{get_badge!(mylib.path_join(cwd, "./CONTRIBUTING/CONTRIBUTING_\{lang}.md"))}"

        # for! tqdm.Tqdm!(doc_en_relative_file_paths), en_path =>
        for! doc_en_relative_file_paths, en_path =>
            relative_file_path = "\{lang.replace "-", "_"}\{mylib.str_slice en_path, len(EN)}"
            add_table_row_text! "[\{path_to_posix mylib.str_slice(en_path, len(EN) + 1)}](../\{en_path})", "[📝 Edit](../\{path_to_posix relative_file_path}) \{get_badge!(mylib.path_join(cwd, relative_file_path))}"

        with! open!(mylib.path_join(cwd, mylib.path_join("translation_status", "translation_status_\{lang}.md")), encoding := "utf-8", mode := "w"), f =>
            discard f.write! str(result_text)

if! __name__ == "__main__", do!:
    main!()
