{
	"$schema": "https://raw.githubusercontent.com/martinring/tmlanguage/master/tmlanguage.json",
	"name": "Erg",
	"patterns": [
		{
			"include": "#operator"
		},
		{
			"include": "#array"
		},
		{
			"include": "#string"
		},
		{
			"include": "#parentheses"
		},
		{
			"include": "#bracket"
		},
		{
			"include": "#function_decl"
		},
		{
			"include": "#function_call"
		},
		{
			"include": "#keyword"
		},
		{
			"include": "#number"
		},
		{
			"include": "#comment"
		},
		{
			"include": "#type_decl"
		},
		{
			"include": "#symbol"
		}
	],
	"repository": {
		"array": {
			"patterns": [
				{
					"begin": "\\[",
					"beginCaptures": {
						"0": {
							"name": "meta.bracket.erg"
						}
					},
					"end": "(\\])((?:\\.)?'*)",
					"endCaptures": {
						"1": {
							"name": "meta.bracket.erg"
						},
						"2": {
							"name": "keyword.operator.transpose.erg"
						}
					},
					"name": "meta.array.erg",
					"patterns": [
						{
							"match": "\\bbegin\\b",
							"name": "constant.numeric.erg"
						},
						{
							"match": "\\bend\\b",
							"name": "constant.numeric.erg"
						},
						{
							"match": "\\bfor\\b",
							"name": "keyword.control.erg"
						},
						{
							"include": "$self"
						}
					]
				}
			]
		},
		"parentheses": {
			"patterns": [
				{
					"begin": "\\(",
					"beginCaptures": {
						"0": {
							"name": "meta.bracket.erg"
						}
					},
					"end": "(\\))((?:\\.)?'*)",
					"endCaptures": {
						"1": {
							"name": "meta.bracket.erg"
						},
						"2": {
							"name": "keyword.operator.transpose.erg"
						}
					},
					"patterns": [
						{
							"include": "$self"
						}
					]
				}
			]
		},
		"bracket": {
			"patterns": [
				{
					"match": "(?:\\(|\\)|\\[|\\]|\\{|\\}|,|;)(?!('|(?:\\.'))*\\.?')",
					"name": "meta.bracket.erg"
				}
			]
		},
		"comment": {
			"patterns": [
				{
					"include": "#comment_block"
				},
				{
					"begin": "#",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.comment.erg"
						}
					},
					"end": "\\n",
					"name": "comment.line.number-sign.erg"
				}
			]
		},
		"comment_block": {
			"patterns": [
				{
					"begin": "#=",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.comment.begin.erg"
						}
					},
					"end": "=#",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.comment.end.erg"
						}
					},
					"name": "comment.block.number-sign-equals.erg",
					"patterns": [
						{
							"include": "#comment_block"
						}
					]
				}
			]
		},
		"function_call": {
			"patterns": [
				{
					"begin": "((?:[[:alpha:]_\\p{Lu}\\p{Ll}\\p{Lt}\\p{Lm}\\p{Lo}\\p{Nl}\\p{Sc}⅀-⅄∿⊾⊿⊤⊥∂∅-∇∎∏∐∑∞∟∫-∳⋀-⋃◸-◿♯⟘⟙⟀⟁⦰-⦴⨀-⨆⨉-⨖⨛⨜𝛁𝛛𝛻𝜕𝜵𝝏𝝯𝞉𝞩𝟃ⁱ-⁾₁-₎∠-∢⦛-⦯℘℮゛-゜𝟎-𝟡]|[^\\P{So}←-⇿])(?:[[:word:]_!\\p{Lu}\\p{Ll}\\p{Lt}\\p{Lm}\\p{Lo}\\p{Nl}\\p{Sc}⅀-⅄∿⊾⊿⊤⊥∂∅-∇∎∏∐∑∞∟∫-∳⋀-⋃◸-◿♯⟘⟙⟀⟁⦰-⦴⨀-⨆⨉-⨖⨛⨜𝛁𝛛𝛻𝜕𝜵𝝏𝝯𝞉𝞩𝟃ⁱ-⁾₁-₎∠-∢⦛-⦯℘℮゛-゜𝟎-𝟡]|[^\\P{Mn}\u0001-¡]|[^\\P{Mc}\u0001-¡]|[^\\P{Nd}\u0001-¡]|[^\\P{Pc}\u0001-¡]|[^\\P{Sk}\u0001-¡]|[^\\P{Me}\u0001-¡]|[^\\P{No}\u0001-¡]|[′-‷⁗]|[^\\P{So}←-⇿])*)({(?:[^{}]|{(?:[^{}]|{[^{}]*})*})*})?\\.?(\\()",
					"beginCaptures": {
						"1": {
							"name": "support.function.erg"
						},
						"2": {
							"name": "support.type.erg"
						},
						"3": {
							"name": "meta.bracket.erg"
						}
					},
					"end": "\\)(('|(\\.'))*\\.?')?",
					"endCaptures": {
						"0": {
							"name": "meta.bracket.erg"
						},
						"1": {
							"name": "keyword.operator.transposed-func.erg"
						}
					},
					"patterns": [
						{
							"match": "\\bfor\\b",
							"name": "keyword.control.erg"
						},
						{
							"include": "$self"
						}
					]
				}
			]
		},
		"function_decl": {
			"patterns": [
				{
					"captures": {
						"1": {
							"name": "entity.name.function.erg"
						},
						"2": {
							"name": "support.type.erg"
						}
					},
					"match": "((?:[[:alpha:]_\\p{Lu}\\p{Ll}\\p{Lt}\\p{Lm}\\p{Lo}\\p{Nl}\\p{Sc}⅀-⅄∿⊾⊿⊤⊥∂∅-∇∎∏∐∑∞∟∫-∳⋀-⋃◸-◿♯⟘⟙⟀⟁⦰-⦴⨀-⨆⨉-⨖⨛⨜𝛁𝛛𝛻𝜕𝜵𝝏𝝯𝞉𝞩𝟃ⁱ-⁾₁-₎∠-∢⦛-⦯℘℮゛-゜𝟎-𝟡]|[^\\P{So}←-⇿])(?:[[:word:]_!\\p{Lu}\\p{Ll}\\p{Lt}\\p{Lm}\\p{Lo}\\p{Nl}\\p{Sc}⅀-⅄∿⊾⊿⊤⊥∂∅-∇∎∏∐∑∞∟∫-∳⋀-⋃◸-◿♯⟘⟙⟀⟁⦰-⦴⨀-⨆⨉-⨖⨛⨜𝛁𝛛𝛻𝜕𝜵𝝏𝝯𝞉𝞩𝟃ⁱ-⁾₁-₎∠-∢⦛-⦯℘℮゛-゜𝟎-𝟡]|[^\\P{Mn}\u0001-¡]|[^\\P{Mc}\u0001-¡]|[^\\P{Nd}\u0001-¡]|[^\\P{Pc}\u0001-¡]|[^\\P{Sk}\u0001-¡]|[^\\P{Me}\u0001-¡]|[^\\P{No}\u0001-¡]|[′-‷⁗]|[^\\P{So}←-⇿])*)({(?:[^{}]|{(?:[^{}]|{[^{}]*})*})*})?(?=\\([^#]*\\)(::[^\\s]+)?(\\s*\\bwhere\\b\\s+.+?)?\\s*?=(?![=>]))",
					"comment": "first group is function name\nSecond group is type parameters (e.g. {T<:Number, S})\nThen open parens\nThen a lookahead ensures that we are followed by:\n  - anything (function argumnets)\n  - 0 or more spaces\n  - Finally an equal sign\nNegative lookahead ensures we don't have another equal sign (not `==`)"
				},
				{
					"captures": {
						"1": {
							"name": "keyword.other.erg"
						},
						"2": {
							"name": "keyword.operator.dots.erg"
						},
						"3": {
							"name": "entity.name.function.erg"
						},
						"4": {
							"name": "support.type.erg"
						}
					},
					"match": "\\b(function|macro)(?:\\s+(?:(?:[[:alpha:]_\\p{Lu}\\p{Ll}\\p{Lt}\\p{Lm}\\p{Lo}\\p{Nl}\\p{Sc}⅀-⅄∿⊾⊿⊤⊥∂∅-∇∎∏∐∑∞∟∫-∳⋀-⋃◸-◿♯⟘⟙⟀⟁⦰-⦴⨀-⨆⨉-⨖⨛⨜𝛁𝛛𝛻𝜕𝜵𝝏𝝯𝞉𝞩𝟃ⁱ-⁾₁-₎∠-∢⦛-⦯℘℮゛-゜𝟎-𝟡]|[^\\P{So}←-⇿])(?:[[:word:]_!\\p{Lu}\\p{Ll}\\p{Lt}\\p{Lm}\\p{Lo}\\p{Nl}\\p{Sc}⅀-⅄∿⊾⊿⊤⊥∂∅-∇∎∏∐∑∞∟∫-∳⋀-⋃◸-◿♯⟘⟙⟀⟁⦰-⦴⨀-⨆⨉-⨖⨛⨜𝛁𝛛𝛻𝜕𝜵𝝏𝝯𝞉𝞩𝟃ⁱ-⁾₁-₎∠-∢⦛-⦯℘℮゛-゜𝟎-𝟡]|[^\\P{Mn}\u0001-¡]|[^\\P{Mc}\u0001-¡]|[^\\P{Nd}\u0001-¡]|[^\\P{Pc}\u0001-¡]|[^\\P{Sk}\u0001-¡]|[^\\P{Me}\u0001-¡]|[^\\P{No}\u0001-¡]|[′-‷⁗]|[^\\P{So}←-⇿])*(\\.))?((?:[[:alpha:]_\\p{Lu}\\p{Ll}\\p{Lt}\\p{Lm}\\p{Lo}\\p{Nl}\\p{Sc}⅀-⅄∿⊾⊿⊤⊥∂∅-∇∎∏∐∑∞∟∫-∳⋀-⋃◸-◿♯⟘⟙⟀⟁⦰-⦴⨀-⨆⨉-⨖⨛⨜𝛁𝛛𝛻𝜕𝜵𝝏𝝯𝞉𝞩𝟃ⁱ-⁾₁-₎∠-∢⦛-⦯℘℮゛-゜𝟎-𝟡]|[^\\P{So}←-⇿])(?:[[:word:]_!\\p{Lu}\\p{Ll}\\p{Lt}\\p{Lm}\\p{Lo}\\p{Nl}\\p{Sc}⅀-⅄∿⊾⊿⊤⊥∂∅-∇∎∏∐∑∞∟∫-∳⋀-⋃◸-◿♯⟘⟙⟀⟁⦰-⦴⨀-⨆⨉-⨖⨛⨜𝛁𝛛𝛻𝜕𝜵𝝏𝝯𝞉𝞩𝟃ⁱ-⁾₁-₎∠-∢⦛-⦯℘℮゛-゜𝟎-𝟡]|[^\\P{Mn}\u0001-¡]|[^\\P{Mc}\u0001-¡]|[^\\P{Nd}\u0001-¡]|[^\\P{Pc}\u0001-¡]|[^\\P{Sk}\u0001-¡]|[^\\P{Me}\u0001-¡]|[^\\P{No}\u0001-¡]|[′-‷⁗]|[^\\P{So}←-⇿])*)({(?:[^{}]|{(?:[^{}]|{[^{}]*})*})*})?|\\s*)(?=\\()",
					"comment": "similar regex to previous, but with keyword not 1-line syntax"
				}
			]
		},
		"keyword": {
			"patterns": [
				{
					"match": "\\b(?<![:_\\.])(?:function|mutable\\s+struct|struct|macro|quote|abstract\\s+type|primitive\\s+type|module|baremodule|where)\\b",
					"name": "keyword.other.erg"
				},
				{
					"comment": "special case for blocks to support tokenizing outer properly",
					"begin": "\\b(for)\\b",
					"beginCaptures": {
						"0": {
							"name": "keyword.control.erg"
						}
					},
					"end": "(?<!,|\\s)(\\s*\\n)",
					"patterns": [
						{
							"match": "\\bouter\\b",
							"name": "keyword.other.erg"
						},
						{
							"include": "$self"
						}
					]
				},
				{
					"match": "\\b(?<![:_])(?:if|else|elseif|while|begin|let|do|try|catch|finally|return|break|continue|assert|pyimport)\\b",
					"name": "keyword.control.erg"
				},
				{
					"match": "\\b(?<![:_])end\\b",
					"name": "keyword.control.end.erg"
				},
				{
					"match": "\\b(?<![:_])(?:global|local|const)\\b",
					"name": "keyword.storage.modifier.erg"
				},
				{
					"match": "\\b(?<![:_])(?:export)\\b",
					"name": "keyword.control.export.erg"
				},
				{
					"match": "\\b(?<![:_])(?:import)\\b",
					"name": "keyword.control.import.erg"
				},
				{
					"match": "\\b(?<![:_])(?:using)\\b",
					"name": "keyword.control.using.erg"
				},
				{
					"match": "(@(\\.|(?:[[:alpha:]_\\p{Lu}\\p{Ll}\\p{Lt}\\p{Lm}\\p{Lo}\\p{Nl}\\p{Sc}⅀-⅄∿⊾⊿⊤⊥∂∅-∇∎∏∐∑∞∟∫-∳⋀-⋃◸-◿♯⟘⟙⟀⟁⦰-⦴⨀-⨆⨉-⨖⨛⨜𝛁𝛛𝛻𝜕𝜵𝝏𝝯𝞉𝞩𝟃ⁱ-⁾₁-₎∠-∢⦛-⦯℘℮゛-゜𝟎-𝟡]|[^\\P{So}←-⇿])(?:[[:word:]_!\\p{Lu}\\p{Ll}\\p{Lt}\\p{Lm}\\p{Lo}\\p{Nl}\\p{Sc}⅀-⅄∿⊾⊿⊤⊥∂∅-∇∎∏∐∑∞∟∫-∳⋀-⋃◸-◿♯⟘⟙⟀⟁⦰-⦴⨀-⨆⨉-⨖⨛⨜𝛁𝛛𝛻𝜕𝜵𝝏𝝯𝞉𝞩𝟃ⁱ-⁾₁-₎∠-∢⦛-⦯℘℮゛-゜𝟎-𝟡]|[^\\P{Mn}\u0001-¡]|[^\\P{Mc}\u0001-¡]|[^\\P{Nd}\u0001-¡]|[^\\P{Pc}\u0001-¡]|[^\\P{Sk}\u0001-¡]|[^\\P{Me}\u0001-¡]|[^\\P{No}\u0001-¡]|[′-‷⁗]|[^\\P{So}←-⇿])*))",
					"name": "support.function.macro.erg"
				}
			]
		},
		"number": {
			"patterns": [
				{
					"match": "((?<!(?:[[:word:]_!\\p{Lu}\\p{Ll}\\p{Lt}\\p{Lm}\\p{Lo}\\p{Nl}\\p{Sc}⅀-⅄∿⊾⊿⊤⊥∂∅-∇∎∏∐∑∞∟∫-∳⋀-⋃◸-◿♯⟘⟙⟀⟁⦰-⦴⨀-⨆⨉-⨖⨛⨜𝛁𝛛𝛻𝜕𝜵𝝏𝝯𝞉𝞩𝟃ⁱ-⁾₁-₎∠-∢⦛-⦯℘℮゛-゜𝟎-𝟡]|[^\\P{Mn}\u0001-¡]|[^\\P{Mc}\u0001-¡]|[^\\P{Nd}\u0001-¡]|[^\\P{Pc}\u0001-¡]|[^\\P{Sk}\u0001-¡]|[^\\P{Me}\u0001-¡]|[^\\P{No}\u0001-¡]|[′-‷⁗]|[^\\P{So}←-⇿]))(?:(?:\\b0(?:x|X)[0-9a-fA-F](?:_?[0-9a-fA-F])*)|(?:\\b0o[0-7](?:_?[0-7])*)|(?:\\b0b[0-1](?:_?[0-1])*)|(?:(?:\\b[0-9](?:_?[0-9])*\\.?(?!\\.)(?:[_0-9]*))|(?:\\b\\.[0-9](?:_?[0-9])*))(?:[efE][+-]?[0-9](?:_?[0-9])*)?(?:im\\b|Inf(?:16|32|64)?\\b|NaN(?:16|32|64)?\\b|π\\b|pi\\b|ℯ\\b)?|\\b[0-9]+|\\bInf(?:16|32|64)?\\b|\\bNaN(?:16|32|64)?\\b|\\bπ\\b|\\bpi\\b|\\bℯ\\b))('*)",
					"captures": {
						"1": {
							"name": "constant.numeric.erg"
						},
						"2": {
							"name": "keyword.operator.conjugate-number.erg"
						}
					}
				},
				{
					"match": "\\bARGS\\b|\\bC_NULL\\b|\\bDEPOT_PATH\\b|\\bENDIAN_BOM\\b|\\bENV\\b|\\bLOAD_PATH\\b|\\bPROGRAM_FILE\\b|\\bstdin\\b|\\bstdout\\b|\\bstderr\\b|\\bVERSION\\b|\\bdevnull\\b",
					"name": "constant.global.erg"
				},
				{
					"match": "\\btrue\\b|\\bfalse\\b|\\bnothing\\b|\\bmissing\\b",
					"name": "constant.language.erg"
				}
			]
		},
		"operator": {
			"patterns": [
				{
					"match": "(?:->|<-|-->|=>)",
					"name": "keyword.operator.arrow.erg"
				},
				{
					"match": "(?::=|\\+=|-=|\\*=|//=|/=|\\.//=|\\./=|\\.\\*=|\\\\=|\\.\\\\=|\\^=|\\.\\^=|%=|\\.%=|÷=|\\.÷=|\\|=|&=|\\.&=|⊻=|\\.⊻=|\\$=|<<=|>>=|>>>=|=(?!=))",
					"name": "keyword.operator.update.erg"
				},
				{
					"match": "(?:<<|>>>|>>|\\.>>>|\\.>>|\\.<<)",
					"name": "keyword.operator.shift.erg"
				},
				{
					"match": "(?:\\s*(::|>:|<:)\\s*((?:(?:Union)?\\([^)]*\\)|[[:alpha:]_$∇][[:word:]⁺-ₜ!′\\.]*(?:(?:{(?:[^{}]|{(?:[^{}]|{[^{}]*})*})*})|(?:\".+?(?<!\\\\)\"))?)))(?:\\.\\.\\.)?",
					"captures": {
						"1": {
							"name": "keyword.operator.relation.types.erg"
						},
						"2": {
							"name": "support.type.erg"
						}
					}
				},
				{
					"match": "(?:===|∈|\\.∈|∉|\\.∉|∋|\\.∋|∌|\\.∌|≈|\\.≈|≉|\\.≉|≠|\\.≠|≡|\\.≡|≢|\\.≢|⊆|\\.⊆|⊇|\\.⊇|⊈|\\.⊈|⊉|\\.⊉|⊊|\\.⊊|⊋|\\.⊋|\\.==|!==|!=|\\.>=|\\.>|\\.<=|\\.<|\\.≤|\\.≥|==|\\.!=|\\.=|\\.!|<:|>:|:>|(?<!>)>=|(?<!<)<=|>|<|≥|≤)",
					"name": "keyword.operator.relation.erg"
				},
				{
					"match": "(?<=\\s)(?:\\?)(?=\\s)",
					"name": "keyword.operator.ternary.erg"
				},
				{
					"match": "(?<=\\s)(?:\\:)(?=\\s)",
					"name": "keyword.operator.ternary.erg"
				},
				{
					"match": "(?:\\|\\||&&|(?<!(?:[[:word:]_!\\p{Lu}\\p{Ll}\\p{Lt}\\p{Lm}\\p{Lo}\\p{Nl}\\p{Sc}⅀-⅄∿⊾⊿⊤⊥∂∅-∇∎∏∐∑∞∟∫-∳⋀-⋃◸-◿♯⟘⟙⟀⟁⦰-⦴⨀-⨆⨉-⨖⨛⨜𝛁𝛛𝛻𝜕𝜵𝝏𝝯𝞉𝞩𝟃ⁱ-⁾₁-₎∠-∢⦛-⦯℘℮゛-゜𝟎-𝟡]|[^\\P{Mn}\u0001-¡]|[^\\P{Mc}\u0001-¡]|[^\\P{Nd}\u0001-¡]|[^\\P{Pc}\u0001-¡]|[^\\P{Sk}\u0001-¡]|[^\\P{Me}\u0001-¡]|[^\\P{No}\u0001-¡]|[′-‷⁗]|[^\\P{So}←-⇿]))!)",
					"name": "keyword.operator.boolean.erg"
				},
				{
					"match": "(?<=[[:word:]⁺-ₜ!′∇\\)\\]\\}])(?::)",
					"name": "keyword.operator.range.erg"
				},
				{
					"match": "(?:\\|>)",
					"name": "keyword.operator.applies.erg"
				},
				{
					"match": "(?:\\||\\.\\||\\&|\\.\\&|~|\\.~|⊻|\\.⊻)",
					"name": "keyword.operator.bitwise.erg"
				},
				{
					"match": "(?:\\+\\+|--|\\+|\\.\\+|-|\\.\\-|\\*|\\.\\*|//(?!=)|\\.//(?!=)|/|\\./|%|\\.%|\\\\|\\.\\\\|\\^|\\.\\^|÷|\\.÷|⋅|\\.⋅|∩|\\.∩|∪|\\.∪|×|√|∛)",
					"name": "keyword.operator.arithmetic.erg"
				},
				{
					"match": "(?:∘)",
					"name": "keyword.operator.compose.erg"
				},
				{
					"match": "(?:::|(?<=\\s)isa(?=\\s))",
					"name": "keyword.operator.isa.erg"
				},
				{
					"match": "(?:(?<=\\s)in(?=\\s))",
					"name": "keyword.operator.relation.in.erg"
				},
				{
					"match": "(?:\\.(?=(?:@|_|\\p{L}))|\\.\\.+)",
					"name": "keyword.operator.dots.erg"
				},
				{
					"match": "(?:\\$)(?=.+)",
					"name": "keyword.operator.interpolation.erg"
				},
				{
					"captures": {
						"2": {
							"name": "keyword.operator.transposed-variable.erg"
						}
					},
					"match": "((?:[[:alpha:]_\\p{Lu}\\p{Ll}\\p{Lt}\\p{Lm}\\p{Lo}\\p{Nl}\\p{Sc}⅀-⅄∿⊾⊿⊤⊥∂∅-∇∎∏∐∑∞∟∫-∳⋀-⋃◸-◿♯⟘⟙⟀⟁⦰-⦴⨀-⨆⨉-⨖⨛⨜𝛁𝛛𝛻𝜕𝜵𝝏𝝯𝞉𝞩𝟃ⁱ-⁾₁-₎∠-∢⦛-⦯℘℮゛-゜𝟎-𝟡]|[^\\P{So}←-⇿])(?:[[:word:]_!\\p{Lu}\\p{Ll}\\p{Lt}\\p{Lm}\\p{Lo}\\p{Nl}\\p{Sc}⅀-⅄∿⊾⊿⊤⊥∂∅-∇∎∏∐∑∞∟∫-∳⋀-⋃◸-◿♯⟘⟙⟀⟁⦰-⦴⨀-⨆⨉-⨖⨛⨜𝛁𝛛𝛻𝜕𝜵𝝏𝝯𝞉𝞩𝟃ⁱ-⁾₁-₎∠-∢⦛-⦯℘℮゛-゜𝟎-𝟡]|[^\\P{Mn}\u0001-¡]|[^\\P{Mc}\u0001-¡]|[^\\P{Nd}\u0001-¡]|[^\\P{Pc}\u0001-¡]|[^\\P{Sk}\u0001-¡]|[^\\P{Me}\u0001-¡]|[^\\P{No}\u0001-¡]|[′-‷⁗]|[^\\P{So}←-⇿])*)(('|(\\.'))*\\.?')"
				},
				{
					"captures": {
						"1": {
							"name": "bracket.end.erg"
						},
						"2": {
							"name": "keyword.operator.transposed-matrix.erg"
						}
					},
					"match": "(\\])((?:'|(?:\\.'))*\\.?')"
				},
				{
					"captures": {
						"1": {
							"name": "bracket.end.erg"
						},
						"2": {
							"name": "keyword.operator.transposed-parens.erg"
						}
					},
					"match": "(\\))((?:'|(?:\\.'))*\\.?')"
				}
			]
		},
		"string": {
			"patterns": [
				{
					"begin": "(?:(@doc)\\s((?:doc)?\"\"\")|(doc\"\"\"))",
					"beginCaptures": {
						"1": {
							"name": "support.function.macro.erg"
						},
						"2": {
							"name": "punctuation.definition.string.begin.erg"
						}
					},
					"end": "(\"\"\") ?(->)?",
					"endCaptures": {
						"1": {
							"name": "punctuation.definition.string.end.erg"
						},
						"2": {
							"name": "keyword.operator.arrow.erg"
						}
					},
					"name": "string.docstring.erg",
					"patterns": [
						{
							"include": "#string_escaped_char"
						},
						{
							"include": "#string_dollar_sign_interpolate"
						}
					]
				},
				{
					"begin": "(i?cxx)(\"\"\")",
					"beginCaptures": {
						"1": {
							"name": "support.function.macro.erg"
						},
						"2": {
							"name": "punctuation.definition.string.begin.erg"
						}
					},
					"end": "\"\"\"",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.string.end.erg"
						}
					},
					"name": "embed.cxx.erg",
					"contentName": "meta.embedded.inline.cpp",
					"patterns": [
						{
							"include": "source.cpp#root_context"
						},
						{
							"include": "#string_dollar_sign_interpolate"
						}
					]
				},
				{
					"begin": "(py)(\"\"\")",
					"beginCaptures": {
						"1": {
							"name": "support.function.macro.erg"
						},
						"2": {
							"name": "punctuation.definition.string.begin.erg"
						}
					},
					"end": "([\\s\\w]*)(\"\"\")",
					"endCaptures": {
						"2": {
							"name": "punctuation.definition.string.end.erg"
						}
					},
					"name": "embed.python.erg",
					"contentName": "meta.embedded.inline.python",
					"patterns": [
						{
							"include": "source.python"
						},
						{
							"include": "#string_dollar_sign_interpolate"
						}
					]
				},
				{
					"begin": "(js)(\"\"\")",
					"beginCaptures": {
						"1": {
							"name": "support.function.macro.erg"
						},
						"2": {
							"name": "punctuation.definition.string.begin.erg"
						}
					},
					"end": "\"\"\"",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.string.end.erg"
						}
					},
					"name": "embed.js.erg",
					"contentName": "meta.embedded.inline.javascript",
					"patterns": [
						{
							"include": "source.js"
						},
						{
							"include": "#string_dollar_sign_interpolate"
						}
					]
				},
				{
					"begin": "(R)(\"\"\")",
					"beginCaptures": {
						"1": {
							"name": "support.function.macro.erg"
						},
						"2": {
							"name": "punctuation.definition.string.begin.erg"
						}
					},
					"end": "\"\"\"",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.string.end.erg"
						}
					},
					"name": "embed.R.erg",
					"contentName": "meta.embedded.inline.r",
					"patterns": [
						{
							"include": "source.r"
						},
						{
							"include": "#string_dollar_sign_interpolate"
						}
					]
				},
				{
					"begin": "(raw)(\"\"\")",
					"beginCaptures": {
						"1": {
							"name": "support.function.macro.erg"
						},
						"2": {
							"name": "punctuation.definition.string.begin.erg"
						}
					},
					"end": "\"\"\"",
					"name": "string.quoted.other.erg",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.string.end.erg"
						}
					}
				},
				{
					"begin": "(raw)(\")",
					"beginCaptures": {
						"1": {
							"name": "support.function.macro.erg"
						},
						"2": {
							"name": "punctuation.definition.string.begin.erg"
						}
					},
					"end": "\"",
					"name": "string.quoted.other.erg",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.string.end.erg"
						}
					}
				},
				{
					"begin": "(sql)(\"\"\")",
					"beginCaptures": {
						"1": {
							"name": "support.function.macro.erg"
						},
						"2": {
							"name": "punctuation.definition.string.begin.erg"
						}
					},
					"end": "\"\"\"",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.string.end.erg"
						}
					},
					"name": "embed.sql.erg",
					"contentName": "meta.embedded.inline.sql",
					"patterns": [
						{
							"include": "source.sql"
						},
						{
							"include": "#string_dollar_sign_interpolate"
						}
					]
				},
				{
					"begin": "var\"\"\"",
					"end": "\"\"\"",
					"name": "constant.other.symbol.erg"
				},
				{
					"begin": "var\"",
					"end": "\"",
					"name": "constant.other.symbol.erg"
				},
				{
					"begin": "^\\s?(doc)?(\"\"\")\\s?$",
					"beginCaptures": {
						"1": {
							"name": "support.function.macro.erg"
						},
						"2": {
							"name": "punctuation.definition.string.begin.erg"
						}
					},
					"end": "(\"\"\")",
					"endCaptures": {
						"1": {
							"name": "punctuation.definition.string.end.erg"
						}
					},
					"name": "string.docstring.erg",
					"comment": "This only matches docstrings that start and end with triple quotes on\ntheir own line in the void",
					"patterns": [
						{
							"include": "#string_escaped_char"
						},
						{
							"include": "#string_dollar_sign_interpolate"
						}
					]
				},
				{
					"begin": "'",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.string.begin.erg"
						}
					},
					"end": "'(?!')",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.string.end.erg"
						}
					},
					"name": "string.quoted.single.erg",
					"patterns": [
						{
							"include": "#string_escaped_char"
						}
					]
				},
				{
					"begin": "\"\"\"",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.string.multiline.begin.erg"
						}
					},
					"end": "\"\"\"",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.string.multiline.end.erg"
						}
					},
					"name": "string.quoted.triple.double.erg",
					"comment": "multi-line string with triple double quotes",
					"patterns": [
						{
							"include": "#string_escaped_char"
						},
						{
							"include": "#string_dollar_sign_interpolate"
						}
					]
				},
				{
					"name": "string.quoted.double.erg",
					"begin": "\"(?!\"\")",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.string.begin.erg"
						}
					},
					"end": "\"",
					"endCaptures": {
						"0": {
							"name": "punctuation.definition.string.end.erg"
						}
					},
					"comment": "String with single pair of double quotes. Regex matches isolated double quote",
					"patterns": [
						{
							"include": "#string_escaped_char"
						},
						{
							"include": "#string_dollar_sign_interpolate"
						}
					]
				},
				{
					"begin": "r\"\"\"",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.string.regexp.begin.erg"
						}
					},
					"end": "(\"\"\")([imsx]{0,4})?",
					"endCaptures": {
						"1": {
							"name": "punctuation.definition.string.regexp.end.erg"
						},
						"2": {
							"comment": "I took this scope name from python regex grammar",
							"name": "keyword.other.option-toggle.regexp.erg"
						}
					},
					"name": "string.regexp.erg",
					"patterns": [
						{
							"include": "#string_escaped_char"
						}
					]
				},
				{
					"begin": "r\"",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.string.regexp.begin.erg"
						}
					},
					"end": "(\")([imsx]{0,4})?",
					"endCaptures": {
						"1": {
							"name": "punctuation.definition.string.regexp.end.erg"
						},
						"2": {
							"comment": "I took this scope name from python regex grammar",
							"name": "keyword.other.option-toggle.regexp.erg"
						}
					},
					"name": "string.regexp.erg",
					"patterns": [
						{
							"include": "#string_escaped_char"
						}
					]
				},
				{
					"begin": "(?<!\")((?:[[:alpha:]_\\p{Lu}\\p{Ll}\\p{Lt}\\p{Lm}\\p{Lo}\\p{Nl}\\p{Sc}⅀-⅄∿⊾⊿⊤⊥∂∅-∇∎∏∐∑∞∟∫-∳⋀-⋃◸-◿♯⟘⟙⟀⟁⦰-⦴⨀-⨆⨉-⨖⨛⨜𝛁𝛛𝛻𝜕𝜵𝝏𝝯𝞉𝞩𝟃ⁱ-⁾₁-₎∠-∢⦛-⦯℘℮゛-゜𝟎-𝟡]|[^\\P{So}←-⇿])(?:[[:word:]_!\\p{Lu}\\p{Ll}\\p{Lt}\\p{Lm}\\p{Lo}\\p{Nl}\\p{Sc}⅀-⅄∿⊾⊿⊤⊥∂∅-∇∎∏∐∑∞∟∫-∳⋀-⋃◸-◿♯⟘⟙⟀⟁⦰-⦴⨀-⨆⨉-⨖⨛⨜𝛁𝛛𝛻𝜕𝜵𝝏𝝯𝞉𝞩𝟃ⁱ-⁾₁-₎∠-∢⦛-⦯℘℮゛-゜𝟎-𝟡]|[^\\P{Mn}\u0001-¡]|[^\\P{Mc}\u0001-¡]|[^\\P{Nd}\u0001-¡]|[^\\P{Pc}\u0001-¡]|[^\\P{Sk}\u0001-¡]|[^\\P{Me}\u0001-¡]|[^\\P{No}\u0001-¡]|[′-‷⁗]|[^\\P{So}←-⇿])*)\"\"\"",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.string.begin.erg"
						},
						"1": {
							"name": "support.function.macro.erg"
						}
					},
					"end": "(\"\"\")((?:[[:alpha:]_\\p{Lu}\\p{Ll}\\p{Lt}\\p{Lm}\\p{Lo}\\p{Nl}\\p{Sc}⅀-⅄∿⊾⊿⊤⊥∂∅-∇∎∏∐∑∞∟∫-∳⋀-⋃◸-◿♯⟘⟙⟀⟁⦰-⦴⨀-⨆⨉-⨖⨛⨜𝛁𝛛𝛻𝜕𝜵𝝏𝝯𝞉𝞩𝟃ⁱ-⁾₁-₎∠-∢⦛-⦯℘℮゛-゜𝟎-𝟡]|[^\\P{So}←-⇿])(?:[[:word:]_!\\p{Lu}\\p{Ll}\\p{Lt}\\p{Lm}\\p{Lo}\\p{Nl}\\p{Sc}⅀-⅄∿⊾⊿⊤⊥∂∅-∇∎∏∐∑∞∟∫-∳⋀-⋃◸-◿♯⟘⟙⟀⟁⦰-⦴⨀-⨆⨉-⨖⨛⨜𝛁𝛛𝛻𝜕𝜵𝝏𝝯𝞉𝞩𝟃ⁱ-⁾₁-₎∠-∢⦛-⦯℘℮゛-゜𝟎-𝟡]|[^\\P{Mn}\u0001-¡]|[^\\P{Mc}\u0001-¡]|[^\\P{Nd}\u0001-¡]|[^\\P{Pc}\u0001-¡]|[^\\P{Sk}\u0001-¡]|[^\\P{Me}\u0001-¡]|[^\\P{No}\u0001-¡]|[′-‷⁗]|[^\\P{So}←-⇿])*)?",
					"endCaptures": {
						"1": {
							"name": "punctuation.definition.string.end.erg"
						},
						"2": {
							"name": "support.function.macro.erg"
						}
					},
					"name": "string.quoted.other.erg",
					"patterns": [
						{
							"include": "#string_escaped_char"
						}
					]
				},
				{
					"begin": "(?<!\")((?:[[:alpha:]_\\p{Lu}\\p{Ll}\\p{Lt}\\p{Lm}\\p{Lo}\\p{Nl}\\p{Sc}⅀-⅄∿⊾⊿⊤⊥∂∅-∇∎∏∐∑∞∟∫-∳⋀-⋃◸-◿♯⟘⟙⟀⟁⦰-⦴⨀-⨆⨉-⨖⨛⨜𝛁𝛛𝛻𝜕𝜵𝝏𝝯𝞉𝞩𝟃ⁱ-⁾₁-₎∠-∢⦛-⦯℘℮゛-゜𝟎-𝟡]|[^\\P{So}←-⇿])(?:[[:word:]_!\\p{Lu}\\p{Ll}\\p{Lt}\\p{Lm}\\p{Lo}\\p{Nl}\\p{Sc}⅀-⅄∿⊾⊿⊤⊥∂∅-∇∎∏∐∑∞∟∫-∳⋀-⋃◸-◿♯⟘⟙⟀⟁⦰-⦴⨀-⨆⨉-⨖⨛⨜𝛁𝛛𝛻𝜕𝜵𝝏𝝯𝞉𝞩𝟃ⁱ-⁾₁-₎∠-∢⦛-⦯℘℮゛-゜𝟎-𝟡]|[^\\P{Mn}\u0001-¡]|[^\\P{Mc}\u0001-¡]|[^\\P{Nd}\u0001-¡]|[^\\P{Pc}\u0001-¡]|[^\\P{Sk}\u0001-¡]|[^\\P{Me}\u0001-¡]|[^\\P{No}\u0001-¡]|[′-‷⁗]|[^\\P{So}←-⇿])*)\"",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.string.begin.erg"
						},
						"1": {
							"name": "support.function.macro.erg"
						}
					},
					"end": "(?<![^\\\\]\\\\)(\")((?:[[:alpha:]_\\p{Lu}\\p{Ll}\\p{Lt}\\p{Lm}\\p{Lo}\\p{Nl}\\p{Sc}⅀-⅄∿⊾⊿⊤⊥∂∅-∇∎∏∐∑∞∟∫-∳⋀-⋃◸-◿♯⟘⟙⟀⟁⦰-⦴⨀-⨆⨉-⨖⨛⨜𝛁𝛛𝛻𝜕𝜵𝝏𝝯𝞉𝞩𝟃ⁱ-⁾₁-₎∠-∢⦛-⦯℘℮゛-゜𝟎-𝟡]|[^\\P{So}←-⇿])(?:[[:word:]_!\\p{Lu}\\p{Ll}\\p{Lt}\\p{Lm}\\p{Lo}\\p{Nl}\\p{Sc}⅀-⅄∿⊾⊿⊤⊥∂∅-∇∎∏∐∑∞∟∫-∳⋀-⋃◸-◿♯⟘⟙⟀⟁⦰-⦴⨀-⨆⨉-⨖⨛⨜𝛁𝛛𝛻𝜕𝜵𝝏𝝯𝞉𝞩𝟃ⁱ-⁾₁-₎∠-∢⦛-⦯℘℮゛-゜𝟎-𝟡]|[^\\P{Mn}\u0001-¡]|[^\\P{Mc}\u0001-¡]|[^\\P{Nd}\u0001-¡]|[^\\P{Pc}\u0001-¡]|[^\\P{Sk}\u0001-¡]|[^\\P{Me}\u0001-¡]|[^\\P{No}\u0001-¡]|[′-‷⁗]|[^\\P{So}←-⇿])*)?",
					"endCaptures": {
						"1": {
							"name": "punctuation.definition.string.end.erg"
						},
						"2": {
							"name": "support.function.macro.erg"
						}
					},
					"name": "string.quoted.other.erg",
					"patterns": [
						{
							"include": "#string_escaped_char"
						}
					]
				},
				{
					"begin": "(?<!`)((?:[[:alpha:]_\\p{Lu}\\p{Ll}\\p{Lt}\\p{Lm}\\p{Lo}\\p{Nl}\\p{Sc}⅀-⅄∿⊾⊿⊤⊥∂∅-∇∎∏∐∑∞∟∫-∳⋀-⋃◸-◿♯⟘⟙⟀⟁⦰-⦴⨀-⨆⨉-⨖⨛⨜𝛁𝛛𝛻𝜕𝜵𝝏𝝯𝞉𝞩𝟃ⁱ-⁾₁-₎∠-∢⦛-⦯℘℮゛-゜𝟎-𝟡]|[^\\P{So}←-⇿])(?:[[:word:]_!\\p{Lu}\\p{Ll}\\p{Lt}\\p{Lm}\\p{Lo}\\p{Nl}\\p{Sc}⅀-⅄∿⊾⊿⊤⊥∂∅-∇∎∏∐∑∞∟∫-∳⋀-⋃◸-◿♯⟘⟙⟀⟁⦰-⦴⨀-⨆⨉-⨖⨛⨜𝛁𝛛𝛻𝜕𝜵𝝏𝝯𝞉𝞩𝟃ⁱ-⁾₁-₎∠-∢⦛-⦯℘℮゛-゜𝟎-𝟡]|[^\\P{Mn}\u0001-¡]|[^\\P{Mc}\u0001-¡]|[^\\P{Nd}\u0001-¡]|[^\\P{Pc}\u0001-¡]|[^\\P{Sk}\u0001-¡]|[^\\P{Me}\u0001-¡]|[^\\P{No}\u0001-¡]|[′-‷⁗]|[^\\P{So}←-⇿])*)?```",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.string.begin.erg"
						},
						"1": {
							"name": "support.function.macro.erg"
						}
					},
					"end": "(```)((?:[[:alpha:]_\\p{Lu}\\p{Ll}\\p{Lt}\\p{Lm}\\p{Lo}\\p{Nl}\\p{Sc}⅀-⅄∿⊾⊿⊤⊥∂∅-∇∎∏∐∑∞∟∫-∳⋀-⋃◸-◿♯⟘⟙⟀⟁⦰-⦴⨀-⨆⨉-⨖⨛⨜𝛁𝛛𝛻𝜕𝜵𝝏𝝯𝞉𝞩𝟃ⁱ-⁾₁-₎∠-∢⦛-⦯℘℮゛-゜𝟎-𝟡]|[^\\P{So}←-⇿])(?:[[:word:]_!\\p{Lu}\\p{Ll}\\p{Lt}\\p{Lm}\\p{Lo}\\p{Nl}\\p{Sc}⅀-⅄∿⊾⊿⊤⊥∂∅-∇∎∏∐∑∞∟∫-∳⋀-⋃◸-◿♯⟘⟙⟀⟁⦰-⦴⨀-⨆⨉-⨖⨛⨜𝛁𝛛𝛻𝜕𝜵𝝏𝝯𝞉𝞩𝟃ⁱ-⁾₁-₎∠-∢⦛-⦯℘℮゛-゜𝟎-𝟡]|[^\\P{Mn}\u0001-¡]|[^\\P{Mc}\u0001-¡]|[^\\P{Nd}\u0001-¡]|[^\\P{Pc}\u0001-¡]|[^\\P{Sk}\u0001-¡]|[^\\P{Me}\u0001-¡]|[^\\P{No}\u0001-¡]|[′-‷⁗]|[^\\P{So}←-⇿])*)?",
					"endCaptures": {
						"1": {
							"name": "punctuation.definition.string.end.erg"
						},
						"2": {
							"name": "support.function.macro.erg"
						}
					},
					"name": "string.interpolated.backtick.erg",
					"patterns": [
						{
							"include": "#string_escaped_char"
						}
					]
				},
				{
					"begin": "(?<!`)((?:[[:alpha:]_\\p{Lu}\\p{Ll}\\p{Lt}\\p{Lm}\\p{Lo}\\p{Nl}\\p{Sc}⅀-⅄∿⊾⊿⊤⊥∂∅-∇∎∏∐∑∞∟∫-∳⋀-⋃◸-◿♯⟘⟙⟀⟁⦰-⦴⨀-⨆⨉-⨖⨛⨜𝛁𝛛𝛻𝜕𝜵𝝏𝝯𝞉𝞩𝟃ⁱ-⁾₁-₎∠-∢⦛-⦯℘℮゛-゜𝟎-𝟡]|[^\\P{So}←-⇿])(?:[[:word:]_!\\p{Lu}\\p{Ll}\\p{Lt}\\p{Lm}\\p{Lo}\\p{Nl}\\p{Sc}⅀-⅄∿⊾⊿⊤⊥∂∅-∇∎∏∐∑∞∟∫-∳⋀-⋃◸-◿♯⟘⟙⟀⟁⦰-⦴⨀-⨆⨉-⨖⨛⨜𝛁𝛛𝛻𝜕𝜵𝝏𝝯𝞉𝞩𝟃ⁱ-⁾₁-₎∠-∢⦛-⦯℘℮゛-゜𝟎-𝟡]|[^\\P{Mn}\u0001-¡]|[^\\P{Mc}\u0001-¡]|[^\\P{Nd}\u0001-¡]|[^\\P{Pc}\u0001-¡]|[^\\P{Sk}\u0001-¡]|[^\\P{Me}\u0001-¡]|[^\\P{No}\u0001-¡]|[′-‷⁗]|[^\\P{So}←-⇿])*)?`",
					"beginCaptures": {
						"0": {
							"name": "punctuation.definition.string.begin.erg"
						},
						"1": {
							"name": "support.function.macro.erg"
						}
					},
					"end": "(?<![^\\\\]\\\\)(`)((?:[[:alpha:]_\\p{Lu}\\p{Ll}\\p{Lt}\\p{Lm}\\p{Lo}\\p{Nl}\\p{Sc}⅀-⅄∿⊾⊿⊤⊥∂∅-∇∎∏∐∑∞∟∫-∳⋀-⋃◸-◿♯⟘⟙⟀⟁⦰-⦴⨀-⨆⨉-⨖⨛⨜𝛁𝛛𝛻𝜕𝜵𝝏𝝯𝞉𝞩𝟃ⁱ-⁾₁-₎∠-∢⦛-⦯℘℮゛-゜𝟎-𝟡]|[^\\P{So}←-⇿])(?:[[:word:]_!\\p{Lu}\\p{Ll}\\p{Lt}\\p{Lm}\\p{Lo}\\p{Nl}\\p{Sc}⅀-⅄∿⊾⊿⊤⊥∂∅-∇∎∏∐∑∞∟∫-∳⋀-⋃◸-◿♯⟘⟙⟀⟁⦰-⦴⨀-⨆⨉-⨖⨛⨜𝛁𝛛𝛻𝜕𝜵𝝏𝝯𝞉𝞩𝟃ⁱ-⁾₁-₎∠-∢⦛-⦯℘℮゛-゜𝟎-𝟡]|[^\\P{Mn}\u0001-¡]|[^\\P{Mc}\u0001-¡]|[^\\P{Nd}\u0001-¡]|[^\\P{Pc}\u0001-¡]|[^\\P{Sk}\u0001-¡]|[^\\P{Me}\u0001-¡]|[^\\P{No}\u0001-¡]|[′-‷⁗]|[^\\P{So}←-⇿])*)?",
					"endCaptures": {
						"1": {
							"name": "punctuation.definition.string.end.erg"
						},
						"2": {
							"name": "support.function.macro.erg"
						}
					},
					"name": "string.interpolated.backtick.erg",
					"patterns": [
						{
							"include": "#string_escaped_char"
						}
					]
				}
			]
		},
		"string_escaped_char": {
			"patterns": [
				{
					"match": "\\\\(\\\\|[0-3]\\d{,2}|[4-7]\\d?|x[a-fA-F0-9]{,2}|u[a-fA-F0-9]{,4}|U[a-fA-F0-9]{,8}|.)",
					"name": "constant.character.escape.erg"
				}
			]
		},
		"string_dollar_sign_interpolate": {
			"patterns": [
				{
					"match": "\\$(?:[[:alpha:]_\\p{Lu}\\p{Ll}\\p{Lt}\\p{Lm}\\p{Lo}\\p{Nl}\\p{Sc}⅀-⅄∿⊾⊿⊤⊥∂∅-∇∎∏∐∑∞∟∫-∳⋀-⋃◸-◿♯⟘⟙⟀⟁⦰-⦴⨀-⨆⨉-⨖⨛⨜𝛁𝛛𝛻𝜕𝜵𝝏𝝯𝞉𝞩𝟃ⁱ-⁾₁-₎∠-∢⦛-⦯℘℮゛-゜𝟎-𝟡]|[^\\P{So}←-⇿])(?:[[:word:]_!\\p{Lu}\\p{Ll}\\p{Lt}\\p{Lm}\\p{Lo}\\p{Nl}\\p{Sc}⅀-⅄∿⊾⊿⊤⊥∂∅-∇∎∏∐∑∞∟∫-∳⋀-⋃◸-◿♯⟘⟙⟀⟁⦰-⦴⨀-⨆⨉-⨖⨛⨜𝛁𝛛𝛻𝜕𝜵𝝏𝝯𝞉𝞩𝟃ⁱ-⁾₁-₎∠-∢⦛-⦯℘℮゛-゜𝟎-𝟡]|[^\\P{Mn}\u0001-¡]|[^\\P{Mc}\u0001-¡]|[^\\P{Nd}\u0001-¡]|[^\\P{Pc}\u0001-¡]|[^\\P{Sk}\u0001-¡]|[^\\P{Me}\u0001-¡]|[^\\P{No}\u0001-¡]|[′-‷⁗]|[^\\P{So}←-⇿])*",
					"name": "variable.interpolation.erg"
				},
				{
					"begin": "\\$\\(",
					"end": "\\)",
					"name": "variable.interpolation.erg",
					"comment": "`punctuation.section.embedded`, `constant.escape`,\n& `meta.embedded.line` were considered but appear to have even spottier\nsupport among popular syntaxes.",
					"patterns": [
						{
							"include": "#parentheses"
						},
						{
							"include": "$self"
						}
					]
				}
			]
		},
		"symbol": {
			"patterns": [
				{
					"match": "(?<![[:word:]⁺-ₜ!′∇\\)\\]\\}]):(?:(?:[[:alpha:]_\\p{Lu}\\p{Ll}\\p{Lt}\\p{Lm}\\p{Lo}\\p{Nl}\\p{Sc}⅀-⅄∿⊾⊿⊤⊥∂∅-∇∎∏∐∑∞∟∫-∳⋀-⋃◸-◿♯⟘⟙⟀⟁⦰-⦴⨀-⨆⨉-⨖⨛⨜𝛁𝛛𝛻𝜕𝜵𝝏𝝯𝞉𝞩𝟃ⁱ-⁾₁-₎∠-∢⦛-⦯℘℮゛-゜𝟎-𝟡]|[^\\P{So}←-⇿])(?:[[:word:]_!\\p{Lu}\\p{Ll}\\p{Lt}\\p{Lm}\\p{Lo}\\p{Nl}\\p{Sc}⅀-⅄∿⊾⊿⊤⊥∂∅-∇∎∏∐∑∞∟∫-∳⋀-⋃◸-◿♯⟘⟙⟀⟁⦰-⦴⨀-⨆⨉-⨖⨛⨜𝛁𝛛𝛻𝜕𝜵𝝏𝝯𝞉𝞩𝟃ⁱ-⁾₁-₎∠-∢⦛-⦯℘℮゛-゜𝟎-𝟡]|[^\\P{Mn}\u0001-¡]|[^\\P{Mc}\u0001-¡]|[^\\P{Nd}\u0001-¡]|[^\\P{Pc}\u0001-¡]|[^\\P{Sk}\u0001-¡]|[^\\P{Me}\u0001-¡]|[^\\P{No}\u0001-¡]|[′-‷⁗]|[^\\P{So}←-⇿])*)(?!(?:[[:word:]_!\\p{Lu}\\p{Ll}\\p{Lt}\\p{Lm}\\p{Lo}\\p{Nl}\\p{Sc}⅀-⅄∿⊾⊿⊤⊥∂∅-∇∎∏∐∑∞∟∫-∳⋀-⋃◸-◿♯⟘⟙⟀⟁⦰-⦴⨀-⨆⨉-⨖⨛⨜𝛁𝛛𝛻𝜕𝜵𝝏𝝯𝞉𝞩𝟃ⁱ-⁾₁-₎∠-∢⦛-⦯℘℮゛-゜𝟎-𝟡]|[^\\P{Mn}\u0001-¡]|[^\\P{Mc}\u0001-¡]|[^\\P{Nd}\u0001-¡]|[^\\P{Pc}\u0001-¡]|[^\\P{Sk}\u0001-¡]|[^\\P{Me}\u0001-¡]|[^\\P{No}\u0001-¡]|[′-‷⁗]|[^\\P{So}←-⇿]))(?![\"`])",
					"name": "constant.other.symbol.erg",
					"comment": "This is string.quoted.symbol.erg in tpoisot's package"
				}
			]
		},
		"type_decl": {
			"patterns": [
				{
					"captures": {
						"1": {
							"name": "entity.name.type.erg"
						},
						"2": {
							"name": "entity.other.inherited-class.erg"
						},
						"3": {
							"name": "punctuation.separator.inheritance.erg"
						}
					},
					"match": "(?>!:_)(?:struct|mutable\\s+struct|abstract\\s+type|primitive\\s+type)\\s+((?:[[:alpha:]_\\p{Lu}\\p{Ll}\\p{Lt}\\p{Lm}\\p{Lo}\\p{Nl}\\p{Sc}⅀-⅄∿⊾⊿⊤⊥∂∅-∇∎∏∐∑∞∟∫-∳⋀-⋃◸-◿♯⟘⟙⟀⟁⦰-⦴⨀-⨆⨉-⨖⨛⨜𝛁𝛛𝛻𝜕𝜵𝝏𝝯𝞉𝞩𝟃ⁱ-⁾₁-₎∠-∢⦛-⦯℘℮゛-゜𝟎-𝟡]|[^\\P{So}←-⇿])(?:[[:word:]_!\\p{Lu}\\p{Ll}\\p{Lt}\\p{Lm}\\p{Lo}\\p{Nl}\\p{Sc}⅀-⅄∿⊾⊿⊤⊥∂∅-∇∎∏∐∑∞∟∫-∳⋀-⋃◸-◿♯⟘⟙⟀⟁⦰-⦴⨀-⨆⨉-⨖⨛⨜𝛁𝛛𝛻𝜕𝜵𝝏𝝯𝞉𝞩𝟃ⁱ-⁾₁-₎∠-∢⦛-⦯℘℮゛-゜𝟎-𝟡]|[^\\P{Mn}\u0001-¡]|[^\\P{Mc}\u0001-¡]|[^\\P{Nd}\u0001-¡]|[^\\P{Pc}\u0001-¡]|[^\\P{Sk}\u0001-¡]|[^\\P{Me}\u0001-¡]|[^\\P{No}\u0001-¡]|[′-‷⁗]|[^\\P{So}←-⇿])*)(\\s*(<:)\\s*(?:[[:alpha:]_\\p{Lu}\\p{Ll}\\p{Lt}\\p{Lm}\\p{Lo}\\p{Nl}\\p{Sc}⅀-⅄∿⊾⊿⊤⊥∂∅-∇∎∏∐∑∞∟∫-∳⋀-⋃◸-◿♯⟘⟙⟀⟁⦰-⦴⨀-⨆⨉-⨖⨛⨜𝛁𝛛𝛻𝜕𝜵𝝏𝝯𝞉𝞩𝟃ⁱ-⁾₁-₎∠-∢⦛-⦯℘℮゛-゜𝟎-𝟡]|[^\\P{So}←-⇿])(?:[[:word:]_!\\p{Lu}\\p{Ll}\\p{Lt}\\p{Lm}\\p{Lo}\\p{Nl}\\p{Sc}⅀-⅄∿⊾⊿⊤⊥∂∅-∇∎∏∐∑∞∟∫-∳⋀-⋃◸-◿♯⟘⟙⟀⟁⦰-⦴⨀-⨆⨉-⨖⨛⨜𝛁𝛛𝛻𝜕𝜵𝝏𝝯𝞉𝞩𝟃ⁱ-⁾₁-₎∠-∢⦛-⦯℘℮゛-゜𝟎-𝟡]|[^\\P{Mn}\u0001-¡]|[^\\P{Mc}\u0001-¡]|[^\\P{Nd}\u0001-¡]|[^\\P{Pc}\u0001-¡]|[^\\P{Sk}\u0001-¡]|[^\\P{Me}\u0001-¡]|[^\\P{No}\u0001-¡]|[′-‷⁗]|[^\\P{So}←-⇿])*(?:{.*})?)?",
					"name": "meta.type.erg"
				}
			]
		}
	},
	"scopeName": "source.erg"
}